// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: protos/common.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// a REQTYPE means one type of api call
type ReqType int32

const (
	ReqType_REQ_TYPE_BIND                  ReqType = 0
	ReqType_REQ_TYPE_CREATE_GROUP          ReqType = 1
	ReqType_REQ_TYPE_ENTER_GROUP           ReqType = 2
	ReqType_REQ_TYPE_EXIT_GROUP            ReqType = 3
	ReqType_REQ_TYPE_DISSOLVE_GROUP        ReqType = 4
	ReqType_REQ_TYPE_INVITE                ReqType = 5
	ReqType_REQ_TYPE_ACCEPT_INVITE         ReqType = 6
	ReqType_REQ_TYPE_REFUSE_INVITE         ReqType = 7
	ReqType_REQ_TYPE_KICK_PLAYER           ReqType = 8
	ReqType_REQ_TYPE_CHANGE_ROLE           ReqType = 9
	ReqType_REQ_TYPE_SET_NEARBY_JOIN_GROUP ReqType = 10
	ReqType_REQ_TYPE_SET_RECENT_JOIN_GROUP ReqType = 11
	ReqType_REQ_TYPE_SET_VOICE_STATE       ReqType = 12
	ReqType_REQ_TYPE_READY                 ReqType = 13
	ReqType_REQ_TYPE_UNREADY               ReqType = 14
	ReqType_REQ_TYPE_START_MATCH           ReqType = 15
	ReqType_REQ_TYPE_CANCEL_MATCH          ReqType = 16
	ReqType_REQ_TYPE_UPLOAD_PLAYER_ATTR    ReqType = 17
)

// Enum value maps for ReqType.
var (
	ReqType_name = map[int32]string{
		0:  "REQ_TYPE_BIND",
		1:  "REQ_TYPE_CREATE_GROUP",
		2:  "REQ_TYPE_ENTER_GROUP",
		3:  "REQ_TYPE_EXIT_GROUP",
		4:  "REQ_TYPE_DISSOLVE_GROUP",
		5:  "REQ_TYPE_INVITE",
		6:  "REQ_TYPE_ACCEPT_INVITE",
		7:  "REQ_TYPE_REFUSE_INVITE",
		8:  "REQ_TYPE_KICK_PLAYER",
		9:  "REQ_TYPE_CHANGE_ROLE",
		10: "REQ_TYPE_SET_NEARBY_JOIN_GROUP",
		11: "REQ_TYPE_SET_RECENT_JOIN_GROUP",
		12: "REQ_TYPE_SET_VOICE_STATE",
		13: "REQ_TYPE_READY",
		14: "REQ_TYPE_UNREADY",
		15: "REQ_TYPE_START_MATCH",
		16: "REQ_TYPE_CANCEL_MATCH",
		17: "REQ_TYPE_UPLOAD_PLAYER_ATTR",
	}
	ReqType_value = map[string]int32{
		"REQ_TYPE_BIND":                  0,
		"REQ_TYPE_CREATE_GROUP":          1,
		"REQ_TYPE_ENTER_GROUP":           2,
		"REQ_TYPE_EXIT_GROUP":            3,
		"REQ_TYPE_DISSOLVE_GROUP":        4,
		"REQ_TYPE_INVITE":                5,
		"REQ_TYPE_ACCEPT_INVITE":         6,
		"REQ_TYPE_REFUSE_INVITE":         7,
		"REQ_TYPE_KICK_PLAYER":           8,
		"REQ_TYPE_CHANGE_ROLE":           9,
		"REQ_TYPE_SET_NEARBY_JOIN_GROUP": 10,
		"REQ_TYPE_SET_RECENT_JOIN_GROUP": 11,
		"REQ_TYPE_SET_VOICE_STATE":       12,
		"REQ_TYPE_READY":                 13,
		"REQ_TYPE_UNREADY":               14,
		"REQ_TYPE_START_MATCH":           15,
		"REQ_TYPE_CANCEL_MATCH":          16,
		"REQ_TYPE_UPLOAD_PLAYER_ATTR":    17,
	}
)

func (x ReqType) Enum() *ReqType {
	p := new(ReqType)
	*p = x
	return p
}

func (x ReqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReqType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_proto_enumTypes[0].Descriptor()
}

func (ReqType) Type() protoreflect.EnumType {
	return &file_protos_common_proto_enumTypes[0]
}

func (x ReqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReqType.Descriptor instead.
func (ReqType) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_proto_rawDescGZIP(), []int{0}
}

type RspCode int32

const (
	RspCode_RSP_CODE_UNKNOWN      RspCode = 0    // unknown
	RspCode_RSP_CODE_SUCCESS      RspCode = 200  // success
	RspCode_RSP_CODE_BAD_REQUEST  RspCode = 400  // bad request (param error, etc...)
	RspCode_RSP_CODE_UNAUTHORIZED RspCode = 401  // no login
	RspCode_RSP_CODE_FORBIDDEN    RspCode = 403  // no permission
	RspCode_RSP_CODE_NOT_FOUND    RspCode = 404  // msg id not found
	RspCode_RSP_CODE_SERVER_ERROR RspCode = 500  // unified server error
	RspCode_RSP_CODE_USER_ERROR   RspCode = 4000 // unified user error
)

// Enum value maps for RspCode.
var (
	RspCode_name = map[int32]string{
		0:    "RSP_CODE_UNKNOWN",
		200:  "RSP_CODE_SUCCESS",
		400:  "RSP_CODE_BAD_REQUEST",
		401:  "RSP_CODE_UNAUTHORIZED",
		403:  "RSP_CODE_FORBIDDEN",
		404:  "RSP_CODE_NOT_FOUND",
		500:  "RSP_CODE_SERVER_ERROR",
		4000: "RSP_CODE_USER_ERROR",
	}
	RspCode_value = map[string]int32{
		"RSP_CODE_UNKNOWN":      0,
		"RSP_CODE_SUCCESS":      200,
		"RSP_CODE_BAD_REQUEST":  400,
		"RSP_CODE_UNAUTHORIZED": 401,
		"RSP_CODE_FORBIDDEN":    403,
		"RSP_CODE_NOT_FOUND":    404,
		"RSP_CODE_SERVER_ERROR": 500,
		"RSP_CODE_USER_ERROR":   4000,
	}
)

func (x RspCode) Enum() *RspCode {
	p := new(RspCode)
	*p = x
	return p
}

func (x RspCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RspCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_proto_enumTypes[1].Descriptor()
}

func (RspCode) Type() protoreflect.EnumType {
	return &file_protos_common_proto_enumTypes[1]
}

func (x RspCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RspCode.Descriptor instead.
func (RspCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_proto_rawDescGZIP(), []int{1}
}

type PushType int32

const (
	PushType_PUSH_TYPE_UNDEFINED           PushType = 0
	PushType_PUSH_TYPE_PLAYER_ONLINE_STATE PushType = 1
	PushType_PUSH_TYPE_GROUP_INFO          PushType = 2
	PushType_PUSH_TYPE_INVITE_MSG          PushType = 3
	PushType_PUSH_TYPE_ACCEPT_INVITE       PushType = 4
	PushType_PUSH_TYPE_REFUSE_INVITE       PushType = 5
	PushType_PUSH_TYPE_GROUP_DISSOLVE      PushType = 6
	PushType_PUSH_TYPE_GROUP_STATE         PushType = 7
	PushType_PUSH_TYPE_PLAYER_VOICE_STATE  PushType = 8
	PushType_PUSH_TYPE_KICK_MSG            PushType = 9
	PushType_PUSH_TYPE_MATCH_SUCCESS       PushType = 10
	PushType_PUSH_TYPE_CANCEL_MATCH        PushType = 11
	PushType_PUSH_TYPE_READY               PushType = 12
	PushType_PUSH_TYPE_UNREADY             PushType = 13
)

// Enum value maps for PushType.
var (
	PushType_name = map[int32]string{
		0:  "PUSH_TYPE_UNDEFINED",
		1:  "PUSH_TYPE_PLAYER_ONLINE_STATE",
		2:  "PUSH_TYPE_GROUP_INFO",
		3:  "PUSH_TYPE_INVITE_MSG",
		4:  "PUSH_TYPE_ACCEPT_INVITE",
		5:  "PUSH_TYPE_REFUSE_INVITE",
		6:  "PUSH_TYPE_GROUP_DISSOLVE",
		7:  "PUSH_TYPE_GROUP_STATE",
		8:  "PUSH_TYPE_PLAYER_VOICE_STATE",
		9:  "PUSH_TYPE_KICK_MSG",
		10: "PUSH_TYPE_MATCH_SUCCESS",
		11: "PUSH_TYPE_CANCEL_MATCH",
		12: "PUSH_TYPE_READY",
		13: "PUSH_TYPE_UNREADY",
	}
	PushType_value = map[string]int32{
		"PUSH_TYPE_UNDEFINED":           0,
		"PUSH_TYPE_PLAYER_ONLINE_STATE": 1,
		"PUSH_TYPE_GROUP_INFO":          2,
		"PUSH_TYPE_INVITE_MSG":          3,
		"PUSH_TYPE_ACCEPT_INVITE":       4,
		"PUSH_TYPE_REFUSE_INVITE":       5,
		"PUSH_TYPE_GROUP_DISSOLVE":      6,
		"PUSH_TYPE_GROUP_STATE":         7,
		"PUSH_TYPE_PLAYER_VOICE_STATE":  8,
		"PUSH_TYPE_KICK_MSG":            9,
		"PUSH_TYPE_MATCH_SUCCESS":       10,
		"PUSH_TYPE_CANCEL_MATCH":        11,
		"PUSH_TYPE_READY":               12,
		"PUSH_TYPE_UNREADY":             13,
	}
)

func (x PushType) Enum() *PushType {
	p := new(PushType)
	*p = x
	return p
}

func (x PushType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PushType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_proto_enumTypes[2].Descriptor()
}

func (PushType) Type() protoreflect.EnumType {
	return &file_protos_common_proto_enumTypes[2]
}

func (x PushType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PushType.Descriptor instead.
func (PushType) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_proto_rawDescGZIP(), []int{2}
}

type PlayerOnlineState int32

const (
	PlayerOnlineState_PLAYER_ONLINE_STATE_OFFLINE   PlayerOnlineState = 0
	PlayerOnlineState_PLAYER_ONLINE_STATE_ONLINE    PlayerOnlineState = 1
	PlayerOnlineState_PLAYER_ONLINE_STATE_IN_GROUP  PlayerOnlineState = 2
	PlayerOnlineState_PLAYER_ONLINE_STATE_IN_MATCH  PlayerOnlineState = 3
	PlayerOnlineState_PLAYER_ONLINE_STATE_IN_GAME   PlayerOnlineState = 4
	PlayerOnlineState_PLAYER_ONLINE_STATE_IN_SETTLE PlayerOnlineState = 5
)

// Enum value maps for PlayerOnlineState.
var (
	PlayerOnlineState_name = map[int32]string{
		0: "PLAYER_ONLINE_STATE_OFFLINE",
		1: "PLAYER_ONLINE_STATE_ONLINE",
		2: "PLAYER_ONLINE_STATE_IN_GROUP",
		3: "PLAYER_ONLINE_STATE_IN_MATCH",
		4: "PLAYER_ONLINE_STATE_IN_GAME",
		5: "PLAYER_ONLINE_STATE_IN_SETTLE",
	}
	PlayerOnlineState_value = map[string]int32{
		"PLAYER_ONLINE_STATE_OFFLINE":   0,
		"PLAYER_ONLINE_STATE_ONLINE":    1,
		"PLAYER_ONLINE_STATE_IN_GROUP":  2,
		"PLAYER_ONLINE_STATE_IN_MATCH":  3,
		"PLAYER_ONLINE_STATE_IN_GAME":   4,
		"PLAYER_ONLINE_STATE_IN_SETTLE": 5,
	}
)

func (x PlayerOnlineState) Enum() *PlayerOnlineState {
	p := new(PlayerOnlineState)
	*p = x
	return p
}

func (x PlayerOnlineState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerOnlineState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_proto_enumTypes[3].Descriptor()
}

func (PlayerOnlineState) Type() protoreflect.EnumType {
	return &file_protos_common_proto_enumTypes[3]
}

func (x PlayerOnlineState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerOnlineState.Descriptor instead.
func (PlayerOnlineState) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_proto_rawDescGZIP(), []int{3}
}

type GameMode int32

const (
	GameMode_GAME_MODE_TEST      GameMode = 0
	GameMode_GAME_MODE_GOAT_GAME GameMode = 905
)

// Enum value maps for GameMode.
var (
	GameMode_name = map[int32]string{
		0:   "GAME_MODE_TEST",
		905: "GAME_MODE_GOAT_GAME",
	}
	GameMode_value = map[string]int32{
		"GAME_MODE_TEST":      0,
		"GAME_MODE_GOAT_GAME": 905,
	}
)

func (x GameMode) Enum() *GameMode {
	p := new(GameMode)
	*p = x
	return p
}

func (x GameMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_proto_enumTypes[4].Descriptor()
}

func (GameMode) Type() protoreflect.EnumType {
	return &file_protos_common_proto_enumTypes[4]
}

func (x GameMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameMode.Descriptor instead.
func (GameMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_proto_rawDescGZIP(), []int{4}
}

type PlayerVoiceState int32

const (
	PlayerVoiceState_PLAYER_VOICE_STATE_MUTE   PlayerVoiceState = 0
	PlayerVoiceState_PLAYER_VOICE_STATE_UNMUTE PlayerVoiceState = 1
)

// Enum value maps for PlayerVoiceState.
var (
	PlayerVoiceState_name = map[int32]string{
		0: "PLAYER_VOICE_STATE_MUTE",
		1: "PLAYER_VOICE_STATE_UNMUTE",
	}
	PlayerVoiceState_value = map[string]int32{
		"PLAYER_VOICE_STATE_MUTE":   0,
		"PLAYER_VOICE_STATE_UNMUTE": 1,
	}
)

func (x PlayerVoiceState) Enum() *PlayerVoiceState {
	p := new(PlayerVoiceState)
	*p = x
	return p
}

func (x PlayerVoiceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerVoiceState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_proto_enumTypes[5].Descriptor()
}

func (PlayerVoiceState) Type() protoreflect.EnumType {
	return &file_protos_common_proto_enumTypes[5]
}

func (x PlayerVoiceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerVoiceState.Descriptor instead.
func (PlayerVoiceState) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_proto_rawDescGZIP(), []int{5}
}

type GroupState int32

const (
	GroupState_GROUP_STATE_INVITE    GroupState = 0
	GroupState_GROUP_STATE_MATCH     GroupState = 1
	GroupState_GROUP_STATE_GAME      GroupState = 2
	GroupState_GROUP_STATE_DISSOLVED GroupState = 3
)

// Enum value maps for GroupState.
var (
	GroupState_name = map[int32]string{
		0: "GROUP_STATE_INVITE",
		1: "GROUP_STATE_MATCH",
		2: "GROUP_STATE_GAME",
		3: "GROUP_STATE_DISSOLVED",
	}
	GroupState_value = map[string]int32{
		"GROUP_STATE_INVITE":    0,
		"GROUP_STATE_MATCH":     1,
		"GROUP_STATE_GAME":      2,
		"GROUP_STATE_DISSOLVED": 3,
	}
)

func (x GroupState) Enum() *GroupState {
	p := new(GroupState)
	*p = x
	return p
}

func (x GroupState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_proto_enumTypes[6].Descriptor()
}

func (GroupState) Type() protoreflect.EnumType {
	return &file_protos_common_proto_enumTypes[6]
}

func (x GroupState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupState.Descriptor instead.
func (GroupState) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_proto_rawDescGZIP(), []int{6}
}

type NetProtocol int32

const (
	NetProtocol_NET_PROTOCOL_TCP   NetProtocol = 0
	NetProtocol_NET_PROTOCOL_UDP   NetProtocol = 1
	NetProtocol_NET_PROTOCOL_WS    NetProtocol = 2
	NetProtocol_NET_PROTOCOL_WSS   NetProtocol = 3
	NetProtocol_NET_PROTOCOL_KCP   NetProtocol = 4
	NetProtocol_NET_PROTOCOL_GRPC  NetProtocol = 5
	NetProtocol_NET_PROTOCOL_GRPCS NetProtocol = 6
)

// Enum value maps for NetProtocol.
var (
	NetProtocol_name = map[int32]string{
		0: "NET_PROTOCOL_TCP",
		1: "NET_PROTOCOL_UDP",
		2: "NET_PROTOCOL_WS",
		3: "NET_PROTOCOL_WSS",
		4: "NET_PROTOCOL_KCP",
		5: "NET_PROTOCOL_GRPC",
		6: "NET_PROTOCOL_GRPCS",
	}
	NetProtocol_value = map[string]int32{
		"NET_PROTOCOL_TCP":   0,
		"NET_PROTOCOL_UDP":   1,
		"NET_PROTOCOL_WS":    2,
		"NET_PROTOCOL_WSS":   3,
		"NET_PROTOCOL_KCP":   4,
		"NET_PROTOCOL_GRPC":  5,
		"NET_PROTOCOL_GRPCS": 6,
	}
)

func (x NetProtocol) Enum() *NetProtocol {
	p := new(NetProtocol)
	*p = x
	return p
}

func (x NetProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_common_proto_enumTypes[7].Descriptor()
}

func (NetProtocol) Type() protoreflect.EnumType {
	return &file_protos_common_proto_enumTypes[7]
}

func (x NetProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetProtocol.Descriptor instead.
func (NetProtocol) EnumDescriptor() ([]byte, []int) {
	return file_protos_common_proto_rawDescGZIP(), []int{7}
}

// CommonRsp is a general-purpose response structure used in request-response scenarios.
// It provides a standardized way to return the status of a request along with optional
// serialized data and tracing information.
//
// Fields:
//   - code: The response code indicating the result of the request. This can be an enum
//     representing success, failure, or any specific error codes.
//   - message: A human-readable error message or informational message. Typically used when
//     `code` indicates a failure.
//   - req_type: The type of the request that this response corresponds to. This can help in
//     identifying the nature or category of the request, and can be an enum indicating
//     different request types.
//   - request_id: The ID of the original request that this response corresponds to. This
//     helps in tracking and correlating requests and responses, especially in asynchronous
//     or distributed systems.
//   - trace_id: A unique identifier used for tracing the request across multiple services or
//     processes. Useful for debugging and performance monitoring in complex systems.
//   - data: Serialized protobuf data that may include additional information relevant to the
//     response. This field is repeated to support multiple pieces of data.
type CommonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      RspCode  `protobuf:"varint,1,opt,name=code,proto3,enum=pb.RspCode" json:"code,omitempty"`
	Message   string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // error message
	ReqType   ReqType  `protobuf:"varint,3,opt,name=req_type,json=reqType,proto3,enum=pb.ReqType" json:"req_type,omitempty"`
	RequestId string   `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	TraceId   string   `protobuf:"bytes,5,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Data      [][]byte `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"` // protobuf serialized data
}

func (x *CommonRsp) Reset() {
	*x = CommonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRsp) ProtoMessage() {}

func (x *CommonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_protos_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRsp.ProtoReflect.Descriptor instead.
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return file_protos_common_proto_rawDescGZIP(), []int{0}
}

func (x *CommonRsp) GetCode() RspCode {
	if x != nil {
		return x.Code
	}
	return RspCode_RSP_CODE_UNKNOWN
}

func (x *CommonRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonRsp) GetReqType() ReqType {
	if x != nil {
		return x.ReqType
	}
	return ReqType_REQ_TYPE_BIND
}

func (x *CommonRsp) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CommonRsp) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *CommonRsp) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// PushMsg is the structure used for server-initiated messages sent to the client.
// These messages are typically used for events or updates that the server needs
// to notify the client about, without a prior request from the client.
//
// Fields:
//   - push_type: Indicates the type of push notification being sent. This is determined by
//     the PUSH_TYPE enum.
//   - data: Serialized protobuf data containing the content of the push message.
//     This could include event details, state updates, or any relevant information
//     the server needs to convey to the client.
type PushMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PushType PushType `protobuf:"varint,1,opt,name=push_type,json=pushType,proto3,enum=pb.PushType" json:"push_type,omitempty"`
	Data     []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // protobuf serialized data
}

func (x *PushMsg) Reset() {
	*x = PushMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMsg) ProtoMessage() {}

func (x *PushMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMsg.ProtoReflect.Descriptor instead.
func (*PushMsg) Descriptor() ([]byte, []int) {
	return file_protos_common_proto_rawDescGZIP(), []int{1}
}

func (x *PushMsg) GetPushType() PushType {
	if x != nil {
		return x.PushType
	}
	return PushType_PUSH_TYPE_UNDEFINED
}

func (x *PushMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_protos_common_proto protoreflect.FileDescriptor

var file_protos_common_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0xbc, 0x01, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x73, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x07, 0x50, 0x75, 0x73, 0x68,
	0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x2a, 0xee, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x53,
	0x4f, 0x4c, 0x56, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x51,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x45,
	0x41, 0x52, 0x42, 0x59, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x51, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x0e, 0x12, 0x18, 0x0a,
	0x14, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x10, 0x11, 0x2a, 0xd5, 0x01, 0x0a, 0x07, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x53, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x53, 0x50, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0xc8, 0x01, 0x12, 0x19, 0x0a, 0x14,
	0x52, 0x53, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x90, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x53, 0x50, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x91, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x53, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x93, 0x03, 0x12, 0x17, 0x0a, 0x12,
	0x52, 0x53, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x94, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x53, 0x50, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf4,
	0x03, 0x12, 0x18, 0x0a, 0x13, 0x52, 0x53, 0x50, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa0, 0x1f, 0x2a, 0x8c, 0x03, 0x0a, 0x08,
	0x50, 0x75, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x55, 0x53, 0x48,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x55, 0x53, 0x48,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x10, 0x06,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x50,
	0x55, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f,
	0x4d, 0x53, 0x47, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0b, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x0d, 0x2a, 0xdc, 0x01, 0x0a, 0x11, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x05, 0x2a, 0x38, 0x0a, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x4f, 0x41, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x10, 0x89, 0x07, 0x2a, 0x4e, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x55,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4d, 0x55, 0x54,
	0x45, 0x10, 0x01, 0x2a, 0x6c, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0xa9, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x57, 0x53,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x57, 0x53, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4b, 0x43, 0x50, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x4e, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x47,
	0x52, 0x50, 0x43, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x53, 0x10, 0x06, 0x42, 0x0d, 0x5a,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_common_proto_rawDescOnce sync.Once
	file_protos_common_proto_rawDescData = file_protos_common_proto_rawDesc
)

func file_protos_common_proto_rawDescGZIP() []byte {
	file_protos_common_proto_rawDescOnce.Do(func() {
		file_protos_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_common_proto_rawDescData)
	})
	return file_protos_common_proto_rawDescData
}

var file_protos_common_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_protos_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_protos_common_proto_goTypes = []any{
	(ReqType)(0),           // 0: pb.ReqType
	(RspCode)(0),           // 1: pb.RspCode
	(PushType)(0),          // 2: pb.PushType
	(PlayerOnlineState)(0), // 3: pb.PlayerOnlineState
	(GameMode)(0),          // 4: pb.GameMode
	(PlayerVoiceState)(0),  // 5: pb.PlayerVoiceState
	(GroupState)(0),        // 6: pb.GroupState
	(NetProtocol)(0),       // 7: pb.NetProtocol
	(*CommonRsp)(nil),      // 8: pb.CommonRsp
	(*PushMsg)(nil),        // 9: pb.PushMsg
}
var file_protos_common_proto_depIdxs = []int32{
	1, // 0: pb.CommonRsp.code:type_name -> pb.RspCode
	0, // 1: pb.CommonRsp.req_type:type_name -> pb.ReqType
	2, // 2: pb.PushMsg.push_type:type_name -> pb.PushType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_protos_common_proto_init() }
func file_protos_common_proto_init() {
	if File_protos_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_common_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CommonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_common_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PushMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_common_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_common_proto_goTypes,
		DependencyIndexes: file_protos_common_proto_depIdxs,
		EnumInfos:         file_protos_common_proto_enumTypes,
		MessageInfos:      file_protos_common_proto_msgTypes,
	}.Build()
	File_protos_common_proto = out.File
	file_protos_common_proto_rawDesc = nil
	file_protos_common_proto_goTypes = nil
	file_protos_common_proto_depIdxs = nil
}
