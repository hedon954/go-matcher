// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/match/accept_invite": {
            "post": {
                "description": "accept an invitation based on the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "accept an invitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Accept Invite Request Body",
                        "name": "AcceptInviteReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apihttp.AcceptInviteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/cancel_match/{uid}": {
            "post": {
                "description": "cancel match",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "cancel match",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "player uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/change_role": {
            "post": {
                "description": "change a player's role based on the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "change a player's role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Change Role Request Body",
                        "name": "ChangeRoleReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apihttp.ChangeRoleReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/create_group": {
            "post": {
                "description": "create a new group based on the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "create a new group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Create Group Request Body",
                        "name": "CreateGroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pto.CreateGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/dissolve_group/{uid}": {
            "post": {
                "description": "dissolve a group based on the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "dissolve a group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/enter_group": {
            "post": {
                "description": "enter a group based on the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "enter a group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Enter Group Request Body",
                        "name": "EnterGroupReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apihttp.EnterGroupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/exit_game": {
            "post": {
                "description": "exit game",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "exit game",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Exit Game Request Body",
                        "name": "ExitGameReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apihttp.ExitGameReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/exit_group/{uid}": {
            "post": {
                "description": "exit a group based on the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "exit a group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/invite": {
            "post": {
                "description": "invite a player based on the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "invite a player",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Invite Request Body",
                        "name": "InviteReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apihttp.InviteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/kick_player": {
            "post": {
                "description": "kick a player based on the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "kick a player",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Kick Player Request Body",
                        "name": "KickPlayerReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apihttp.KickPlayerReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/ready/{uid}": {
            "post": {
                "description": "ready",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "ready",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "player uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/refuse_invite": {
            "post": {
                "description": "refuse an invitation based on the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "refuse an invitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Refuse Invite Request Body",
                        "name": "RefuseInviteReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apihttp.RefuseInviteReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/set_nearby_join_group": {
            "post": {
                "description": "set whether group can be entered from nearby players list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "set nearby join group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Set Nearby Join Group Request Body",
                        "name": "SetNearbyJoinGroupReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apihttp.SetNearbyJoinGroupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/set_recent_join_group": {
            "post": {
                "description": "set whether group can be entered from recent players list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "set recent join group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Set Recent Join Group Request Body",
                        "name": "SetRecentJoinGroupReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apihttp.SetRecentJoinGroupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/set_voice_state": {
            "post": {
                "description": "set player voice state",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "set voice state",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Set Voice State Request Body",
                        "name": "SetVoiceStateReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apihttp.SetVoiceStateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/start_match/{uid}": {
            "post": {
                "description": "start to match",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "start match",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "player uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/unready/{uid}": {
            "post": {
                "description": "unready",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "unready",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "player uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/match/upload_player_attr": {
            "post": {
                "description": "upload player attr",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match service"
                ],
                "summary": "upload player attr",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "x-request-id",
                        "in": "header"
                    },
                    {
                        "description": "Upload Player Attr Request Body",
                        "name": "UploadPlayerAttrReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apihttp.UploadPlayerAttrReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Concrete Error Msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apihttp.AcceptInviteReq": {
            "type": "object",
            "required": [
                "group_id",
                "invitee_info",
                "inviter_uid"
            ],
            "properties": {
                "group_id": {
                    "type": "integer"
                },
                "invitee_info": {
                    "$ref": "#/definitions/pto.PlayerInfo"
                },
                "inviter_uid": {
                    "type": "string"
                }
            }
        },
        "apihttp.ChangeRoleReq": {
            "type": "object",
            "required": [
                "captain_uid",
                "role",
                "target_uid"
            ],
            "properties": {
                "captain_uid": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/entry.GroupRole"
                },
                "target_uid": {
                    "type": "string"
                }
            }
        },
        "apihttp.CreateGroupRsp": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "integer"
                }
            }
        },
        "apihttp.EnterGroupReq": {
            "type": "object",
            "required": [
                "group_id",
                "player_info"
            ],
            "properties": {
                "group_id": {
                    "type": "integer"
                },
                "player_info": {
                    "$ref": "#/definitions/pto.EnterGroup"
                }
            }
        },
        "apihttp.ExitGameReq": {
            "type": "object",
            "required": [
                "room_id",
                "uid"
            ],
            "properties": {
                "room_id": {
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "apihttp.InviteReq": {
            "type": "object",
            "required": [
                "invitee_info",
                "inviter_uid"
            ],
            "properties": {
                "invitee_info": {
                    "$ref": "#/definitions/pto.PlayerInfo"
                },
                "inviter_uid": {
                    "type": "string"
                }
            }
        },
        "apihttp.KickPlayerReq": {
            "type": "object",
            "required": [
                "captain_uid",
                "kicked_uid"
            ],
            "properties": {
                "captain_uid": {
                    "type": "string"
                },
                "kicked_uid": {
                    "type": "string"
                }
            }
        },
        "apihttp.RefuseInviteReq": {
            "type": "object",
            "required": [
                "group_id",
                "invitee_uid",
                "inviter_uid"
            ],
            "properties": {
                "group_id": {
                    "type": "integer"
                },
                "invitee_uid": {
                    "type": "string"
                },
                "inviter_uid": {
                    "type": "string"
                },
                "refuse_msg": {
                    "type": "string"
                }
            }
        },
        "apihttp.SetNearbyJoinGroupReq": {
            "type": "object",
            "required": [
                "captain_uid"
            ],
            "properties": {
                "allow": {
                    "type": "boolean"
                },
                "captain_uid": {
                    "type": "string"
                }
            }
        },
        "apihttp.SetRecentJoinGroupReq": {
            "type": "object",
            "required": [
                "captain_uid"
            ],
            "properties": {
                "allow": {
                    "type": "boolean"
                },
                "captain_uid": {
                    "type": "string"
                }
            }
        },
        "apihttp.SetVoiceStateReq": {
            "type": "object",
            "required": [
                "uid"
            ],
            "properties": {
                "state": {
                    "maximum": 1,
                    "minimum": 0,
                    "allOf": [
                        {
                            "$ref": "#/definitions/entry.PlayerVoiceState"
                        }
                    ]
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "apihttp.UploadPlayerAttrReq": {
            "type": "object",
            "required": [
                "uid"
            ],
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "extra": {
                    "description": "Extra is the extra information of a player needed by different game mode.\nHere, if you want to do each game mode is independent,\nyou need to use 1+n interfaces (uploadCommonAttr +n * uploadxxxGameAttr),\nthe development efficiency is relatively low.\n\nAfter weighing, it was decided to use a common interface for processing,\nand then use Extra extension fields for different game modes,\nin the specific game mode implementation,\nneed to parse and carry out the corresponding processing logic.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "nickname": {
                    "type": "string"
                },
                "star": {
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "constant.GameMode": {
            "type": "integer",
            "enum": [
                -1,
                905
            ],
            "x-enum-varnames": [
                "GameModeTest",
                "GameModeGoatGame"
            ]
        },
        "entry.GroupRole": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "GroupRoleMember",
                "GroupRoleCaptain"
            ]
        },
        "entry.PlayerVoiceState": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "PlayerVoiceStateMute",
                "PlayerVoiceStateUnmute"
            ]
        },
        "pto.CreateGroup": {
            "type": "object",
            "required": [
                "game_mode",
                "mode_version",
                "uid"
            ],
            "properties": {
                "game_mode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/constant.GameMode"
                        }
                    ],
                    "example": 905
                },
                "glicko2_info": {
                    "$ref": "#/definitions/pto.Glicko2Info"
                },
                "mode_version": {
                    "type": "integer",
                    "example": 1
                },
                "rank": {
                    "type": "integer"
                },
                "star": {
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "pto.EnterGroup": {
            "type": "object",
            "required": [
                "game_mode",
                "mode_version",
                "uid"
            ],
            "properties": {
                "game_mode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/constant.GameMode"
                        }
                    ],
                    "example": 905
                },
                "glicko2_info": {
                    "$ref": "#/definitions/pto.Glicko2Info"
                },
                "mode_version": {
                    "type": "integer",
                    "example": 1
                },
                "rank": {
                    "type": "integer"
                },
                "source": {
                    "$ref": "#/definitions/pto.EnterGroupSourceType"
                },
                "star": {
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "pto.EnterGroupSourceType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "x-enum-comments": {
                "EnterGroupSourceTypeClanChannel": "from clan channel",
                "EnterGroupSourceTypeFriend": "from friend list",
                "EnterGroupSourceTypeInvite": "invited by other",
                "EnterGroupSourceTypeNearby": "from recent list",
                "EnterGroupSourceTypeRecent": "from nearby list",
                "EnterGroupSourceTypeShare": "from share link",
                "EnterGroupSourceTypeWorldChannel": "from world channel"
            },
            "x-enum-varnames": [
                "EnterGroupSourceTypeInvite",
                "EnterGroupSourceTypeNearby",
                "EnterGroupSourceTypeRecent",
                "EnterGroupSourceTypeFriend",
                "EnterGroupSourceTypeWorldChannel",
                "EnterGroupSourceTypeClanChannel",
                "EnterGroupSourceTypeShare"
            ]
        },
        "pto.Glicko2Info": {
            "type": "object",
            "properties": {
                "mmr": {
                    "type": "number"
                },
                "rank": {
                    "type": "integer"
                },
                "star": {
                    "type": "integer"
                }
            }
        },
        "pto.PlayerInfo": {
            "type": "object",
            "required": [
                "game_mode",
                "mode_version",
                "uid"
            ],
            "properties": {
                "game_mode": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/constant.GameMode"
                        }
                    ],
                    "example": 905
                },
                "glicko2_info": {
                    "$ref": "#/definitions/pto.Glicko2Info"
                },
                "mode_version": {
                    "type": "integer",
                    "example": 1
                },
                "rank": {
                    "type": "integer"
                },
                "star": {
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
